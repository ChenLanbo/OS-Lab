Name: Lanbo Chen
ID  : #108079696

***************************************************************************************************

Lab1 late hours: 0
Total late hours: 0

***************************************************************************************************

Lab2 late hours: 0
Total late hours: 0

Challenge 1: space-efficient Kernel mapping using PTE_PS
	
	When mapping [KERNBASE, 2^32) to [0, 2^32 - KERNBASE), I set the perm to 'PTE_W | PTE_PS'
	in boot_map_segment.

	In function boot_map_segment, first check the perm has PTE_PS. If it has, then we set the
	page directory entry to be 'pa | perm | PTE_P'. Since the page directory entry can repre-
	sent 4MB physical page and the kernel has max memory of 256MB, we just need to set the 
	values of 64 page directory entry. Thus we save 64 4K pages.

	In the end, we have to set the CR4_PSE bit in cr4 register in order to enable extention.
	This is done after installing page table first time and before turing on paging.


Challenge 2: add showmappings

	I add two new files which are memutil.h and memutil.c to define memory mangement functio-
	ns.

	showmappings: show the physical mappings of given virtual addresses
		Usage: showmappings [virtual address]
		Output: no mapping if the virtual address is not mapped into physical page
				physical page address and permissions if mapped

		Use pgdir_walk in pmap.c

Challenge 3:

Challenge 4:

Challenge 5: add alloc_page, page_status, free_page commands

	These tree files are defined in memutil.c

	alloc_page: alloc a page of 4KB
		Usage: alloc_page
